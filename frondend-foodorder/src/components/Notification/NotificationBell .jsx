import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";
import "./NotificationBell.scss";

const NotificationBell = ({ username }) => { // Nh·∫≠n username t·ª´ props
    const [notifications, setNotifications] = useState([]);
    const user = useSelector(state => state.account.user);

    useEffect(() => {
        if (!username) return; // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ username th√¨ tho√°t

        // T·∫°o WebSocket k·∫øt n·ªëi
        const socket = new SockJS("http://localhost:8080/ws");
        const stompClient = new Client({
            webSocketFactory: () => socket,
            debug: (str) => console.log(str), // Debug th√¥ng tin WebSocket
            reconnectDelay: 5000, // T·ª± ƒë·ªông reconnect sau 5s n·∫øu m·∫•t k·∫øt n·ªëi
            onConnect: () => {
                console.log("üîó STOMP Connected!");

                // ƒêƒÉng k√Ω nh·∫≠n tin nh·∫Øn t·ª´ k√™nh c√° nh√¢n
                stompClient.subscribe(`/user/${username}/notify`, (message) => {
                    console.log("üì© Nh·∫≠n th√¥ng b√°o m·ªõi:", message.body);
                    const newNotification = JSON.parse(message.body);
                    setNotifications((prev) => [newNotification, ...prev]);
                });
            },
            onDisconnect: () => console.log("‚ùå STOMP Disconnected"),
        });


        stompClient.activate(); // K√≠ch ho·∫°t k·∫øt n·ªëi STOMP

        return () => {
            if (stompClient.active) {
                stompClient.deactivate(); // Ng·∫Øt k·∫øt n·ªëi STOMP
            }
        };
    }, [username]);

    return (
        <div>
            <h3>Th√¥ng b√°o</h3>
            <ul>
                {notifications.map((notif, index) => (
                    <li key={index}>{notif.message}</li>
                ))}
            </ul>
        </div>
    );
};

export default NotificationBell;
